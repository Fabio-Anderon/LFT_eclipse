/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.parser;

import portugol.lexer.*;
import portugol.node.*;
import portugol.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce APrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAlistdeclaracao1ListDeclaracao */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AAlistdeclaracao2ListDeclaracao */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AAseqvariaveisdeclaracao1Declaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AAseqvariaveisdeclaracao2Declaracao */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AConstanteDeclaracao */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce ADeclVar */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce AIntTipo */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce ACharTipo */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AIdVariavel */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce AVetorVariavel */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce AStringValor */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce ANumIntValor */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce ANumRealValor */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce AAlistcomando1ListComando */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list);
            }
            break;
            case 16: /* reduce AAlistcomando2ListComando */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list);
            }
            break;
            case 17: /* reduce AAtribuicaoComando */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list);
            }
            break;
            case 18: /* reduce AAleiacomando1Comando */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list);
            }
            break;
            case 19: /* reduce AAleiacomando2Comando */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce AAescrevaexpcomando1Comando */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce AAescrevaexpcomando2Comando */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce AAescrevaexplogicacomando1Comando */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce AAescrevaexplogicacomando2Comando */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list);
            }
            break;
            case 24: /* reduce AAsecomando1Comando */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce AAsecomando2Comando */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce AAavaliecomando1Comando */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list);
            }
            break;
            case 27: /* reduce AAavaliecomando2Comando */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce AAavaliecomando3Comando */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list);
            }
            break;
            case 29: /* reduce AAavaliecomando4Comando */
            {
                ArrayList<Object> list = new29();
                push(goTo(8), list);
            }
            break;
            case 30: /* reduce AEnquantoComando */
            {
                ArrayList<Object> list = new30();
                push(goTo(8), list);
            }
            break;
            case 31: /* reduce ARepitaComando */
            {
                ArrayList<Object> list = new31();
                push(goTo(8), list);
            }
            break;
            case 32: /* reduce AAparacomando1Comando */
            {
                ArrayList<Object> list = new32();
                push(goTo(8), list);
            }
            break;
            case 33: /* reduce AAparacomando2Comando */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list);
            }
            break;
            case 34: /* reduce AExpVirgula */
            {
                ArrayList<Object> list = new34();
                push(goTo(9), list);
            }
            break;
            case 35: /* reduce AExpLogicaVirgula */
            {
                ArrayList<Object> list = new35();
                push(goTo(10), list);
            }
            break;
            case 36: /* reduce AElseParte */
            {
                ArrayList<Object> list = new36();
                push(goTo(11), list);
            }
            break;
            case 37: /* reduce ACasoOpcao */
            {
                ArrayList<Object> list = new37();
                push(goTo(12), list);
            }
            break;
            case 38: /* reduce APadrao */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list);
            }
            break;
            case 39: /* reduce APasso */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list);
            }
            break;
            case 40: /* reduce AIPara */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list);
            }
            break;
            case 41: /* reduce ANPara */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list);
            }
            break;
            case 42: /* reduce ASomaExp */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list);
            }
            break;
            case 43: /* reduce ATermoExp */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list);
            }
            break;
            case 44: /* reduce AMultTermo */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list);
            }
            break;
            case 45: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list);
            }
            break;
            case 46: /* reduce AExpParentesFator */
            {
                ArrayList<Object> list = new46();
                push(goTo(19), list);
            }
            break;
            case 47: /* reduce AMenosExpFator */
            {
                ArrayList<Object> list = new47();
                push(goTo(19), list);
            }
            break;
            case 48: /* reduce AVariavelFator */
            {
                ArrayList<Object> list = new48();
                push(goTo(19), list);
            }
            break;
            case 49: /* reduce AValorFator */
            {
                ArrayList<Object> list = new49();
                push(goTo(19), list);
            }
            break;
            case 50: /* reduce AMaisSoma */
            {
                ArrayList<Object> list = new50();
                push(goTo(20), list);
            }
            break;
            case 51: /* reduce AMenosSoma */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list);
            }
            break;
            case 52: /* reduce AProdutoMult */
            {
                ArrayList<Object> list = new52();
                push(goTo(21), list);
            }
            break;
            case 53: /* reduce ADivisaoMult */
            {
                ArrayList<Object> list = new53();
                push(goTo(21), list);
            }
            break;
            case 54: /* reduce AXorExpLogica */
            {
                ArrayList<Object> list = new54();
                push(goTo(22), list);
            }
            break;
            case 55: /* reduce AExpOuExpLogica */
            {
                ArrayList<Object> list = new55();
                push(goTo(22), list);
            }
            break;
            case 56: /* reduce AOuExpOu */
            {
                ArrayList<Object> list = new56();
                push(goTo(23), list);
            }
            break;
            case 57: /* reduce AExpEExpOu */
            {
                ArrayList<Object> list = new57();
                push(goTo(23), list);
            }
            break;
            case 58: /* reduce AEExpE */
            {
                ArrayList<Object> list = new58();
                push(goTo(24), list);
            }
            break;
            case 59: /* reduce AExpIgualExpE */
            {
                ArrayList<Object> list = new59();
                push(goTo(24), list);
            }
            break;
            case 60: /* reduce AExpSimpIgualExpIgual */
            {
                ArrayList<Object> list = new60();
                push(goTo(25), list);
            }
            break;
            case 61: /* reduce AExpMultIgualExpIgual */
            {
                ArrayList<Object> list = new61();
                push(goTo(25), list);
            }
            break;
            case 62: /* reduce AExpComparacaoExpIgual */
            {
                ArrayList<Object> list = new62();
                push(goTo(25), list);
            }
            break;
            case 63: /* reduce AExpNaoExpIgual */
            {
                ArrayList<Object> list = new63();
                push(goTo(25), list);
            }
            break;
            case 64: /* reduce ANaoExpParentesExpNao */
            {
                ArrayList<Object> list = new64();
                push(goTo(26), list);
            }
            break;
            case 65: /* reduce AExpParentesExpNao */
            {
                ArrayList<Object> list = new65();
                push(goTo(26), list);
            }
            break;
            case 66: /* reduce AExpParentes */
            {
                ArrayList<Object> list = new66();
                push(goTo(27), list);
            }
            break;
            case 67: /* reduce AExpAlter */
            {
                ArrayList<Object> list = new67();
                push(goTo(28), list);
            }
            break;
            case 68: /* reduce AExpParentesAlter */
            {
                ArrayList<Object> list = new68();
                push(goTo(29), list);
            }
            break;
            case 69: /* reduce AIgualIgualDiferente */
            {
                ArrayList<Object> list = new69();
                push(goTo(30), list);
            }
            break;
            case 70: /* reduce ADiferenteIgualDiferente */
            {
                ArrayList<Object> list = new70();
                push(goTo(30), list);
            }
            break;
            case 71: /* reduce AMaiorOpComparar */
            {
                ArrayList<Object> list = new71();
                push(goTo(31), list);
            }
            break;
            case 72: /* reduce AMenorOpComparar */
            {
                ArrayList<Object> list = new72();
                push(goTo(31), list);
            }
            break;
            case 73: /* reduce AMaiorIgualOpComparar */
            {
                ArrayList<Object> list = new73();
                push(goTo(31), list);
            }
            break;
            case 74: /* reduce AMenorIgualOpComparar */
            {
                ArrayList<Object> list = new74();
                push(goTo(31), list);
            }
            break;
            case 75: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new75();
                push(goTo(32), list);
            }
            break;
            case 76: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new76();
                push(goTo(32), list);
            }
            break;
            case 77: /* reduce ATerminal$DeclVar */
            {
                ArrayList<Object> list = new77();
                push(goTo(33), list);
            }
            break;
            case 78: /* reduce ANonTerminal$DeclVar */
            {
                ArrayList<Object> list = new78();
                push(goTo(33), list);
            }
            break;
            case 79: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new79();
                push(goTo(34), list);
            }
            break;
            case 80: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new80();
                push(goTo(34), list);
            }
            break;
            case 81: /* reduce ATerminal$ExpVirgula */
            {
                ArrayList<Object> list = new81();
                push(goTo(35), list);
            }
            break;
            case 82: /* reduce ANonTerminal$ExpVirgula */
            {
                ArrayList<Object> list = new82();
                push(goTo(35), list);
            }
            break;
            case 83: /* reduce ATerminal$ExpLogicaVirgula */
            {
                ArrayList<Object> list = new83();
                push(goTo(36), list);
            }
            break;
            case 84: /* reduce ANonTerminal$ExpLogicaVirgula */
            {
                ArrayList<Object> list = new84();
                push(goTo(36), list);
            }
            break;
            case 85: /* reduce ATerminal$CasoOpcao */
            {
                ArrayList<Object> list = new85();
                push(goTo(37), list);
            }
            break;
            case 86: /* reduce ANonTerminal$CasoOpcao */
            {
                ArrayList<Object> list = new86();
                push(goTo(37), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce APrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogramaNode1 = new APrograma(listNode3, listNode5);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAlistdeclaracao1ListDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAlistdeclaracao2ListDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAseqvariaveisdeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        PVariavel pvariavelNode3;
        pvariavelNode3 = (PVariavel)nodeArrayList3.get(0);
	if(pvariavelNode3 != null)
	{
	  listNode4.add(pvariavelNode3);
	}
        }

        pdeclaracaoNode1 = new ASeqVariaveisDeclaracao(ptipoNode2, listNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAseqvariaveisdeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PVariavel pvariavelNode4;
        listNode3 = (LinkedList)nodeArrayList3.get(0);
        pvariavelNode4 = (PVariavel)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode5.addAll(listNode3);
	}
	if(pvariavelNode4 != null)
	{
	  listNode5.add(pvariavelNode4);
	}
        }

        pdeclaracaoNode1 = new ASeqVariaveisDeclaracao(ptipoNode2, listNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AConstanteDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TConst tconstNode2;
        TIdentificador tidentificadorNode3;
        PValor pvalorNode4;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList2.get(0);
        pvalorNode4 = (PValor)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AConstanteDeclaracao(tconstNode2, tidentificadorNode3, pvalorNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ADeclVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        pvariavelNode1 = (PVariavel)nodeArrayList1.get(0);
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIntTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AIntTipo(tinteiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ACharTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ACharTipo(tcaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AIdVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pvariavelNode1 = new AIdVariavel(tidentificadorNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AVetorVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        TAbreColchete tabrecolcheteNode3;
        TNumInt tnumintNode4;
        TFechaColchete tfechacolcheteNode5;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        tabrecolcheteNode3 = (TAbreColchete)nodeArrayList2.get(0);
        tnumintNode4 = (TNumInt)nodeArrayList3.get(0);
        tfechacolcheteNode5 = (TFechaColchete)nodeArrayList4.get(0);

        pvariavelNode1 = new AVetorVariavel(tidentificadorNode2, tabrecolcheteNode3, tnumintNode4, tfechacolcheteNode5);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ANumIntValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumInt tnumintNode2;
        tnumintNode2 = (TNumInt)nodeArrayList1.get(0);

        pvalorNode1 = new ANumIntValor(tnumintNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANumRealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumReal tnumrealNode2;
        tnumrealNode2 = (TNumReal)nodeArrayList1.get(0);

        pvalorNode1 = new ANumRealValor(tnumrealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAlistcomando1ListComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAlistcomando2ListComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAtribuicaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        PExp pexpNode3;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AAtribuicaoComando(pvariavelNode2, pexpNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAleiacomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PVariavel pvariavelNode2;
        pvariavelNode2 = (PVariavel)nodeArrayList3.get(0);
	if(pvariavelNode2 != null)
	{
	  listNode3.add(pvariavelNode2);
	}
        }

        pcomandoNode1 = new ALeiaComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAleiacomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PVariavel pvariavelNode2;
        pvariavelNode2 = (PVariavel)nodeArrayList4.get(0);
	if(pvariavelNode2 != null)
	{
	  listNode3.add(pvariavelNode2);
	}
        }

        pcomandoNode1 = new ALeiaComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAescrevaexpcomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }

        pcomandoNode1 = new AEscrevaExpComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAescrevaexpcomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList4.get(0);
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }

        pcomandoNode1 = new AEscrevaExpComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAescrevaexplogicacomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
	if(pexplogicaNode2 != null)
	{
	  listNode3.add(pexplogicaNode2);
	}
        }

        pcomandoNode1 = new AEscrevaExpLogicaComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAescrevaexplogicacomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList4.get(0);
	if(pexplogicaNode2 != null)
	{
	  listNode3.add(pexplogicaNode2);
	}
        }

        pcomandoNode1 = new AEscrevaExpLogicaComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAsecomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new ASeComando(pexplogicaNode2, listNode4, null);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAsecomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PElseParte pelseparteNode5;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pelseparteNode5 = (PElseParte)nodeArrayList7.get(0);

        pcomandoNode1 = new ASeComando(pexplogicaNode2, listNode4, pelseparteNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAavaliecomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        }

        pcomandoNode1 = new AAvalieComando(pexpNode2, listNode3, null);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAavaliecomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new AAvalieComando(pexpNode2, listNode4, null);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAavaliecomando3Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PPadrao ppadraoNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        }
        ppadraoNode4 = (PPadrao)nodeArrayList5.get(0);

        pcomandoNode1 = new AAvalieComando(pexpNode2, listNode3, ppadraoNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAavaliecomando4Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PPadrao ppadraoNode5;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ppadraoNode5 = (PPadrao)nodeArrayList6.get(0);

        pcomandoNode1 = new AAvalieComando(pexpNode2, listNode4, ppadraoNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AEnquantoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new AEnquantoComando(pexplogicaNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ARepitaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpLogica pexplogicaNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexplogicaNode4 = (PExpLogica)nodeArrayList5.get(0);

        pcomandoNode1 = new ARepitaComando(listNode3, pexplogicaNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAparacomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        PIPara piparaNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        PNPara pnparaNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pvariavelNode2 = (PVariavel)nodeArrayList2.get(0);
        piparaNode3 = (PIPara)nodeArrayList4.get(0);
        pnparaNode5 = (PNPara)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pcomandoNode1 = new AParaComando(pvariavelNode2, piparaNode3, null, pnparaNode5, listNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAparacomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        PIPara piparaNode3;
        PPasso ppassoNode4;
        PNPara pnparaNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pvariavelNode2 = (PVariavel)nodeArrayList2.get(0);
        piparaNode3 = (PIPara)nodeArrayList4.get(0);
        ppassoNode4 = (PPasso)nodeArrayList5.get(0);
        pnparaNode5 = (PNPara)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList9.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pcomandoNode1 = new AParaComando(pvariavelNode2, piparaNode3, ppassoNode4, pnparaNode5, listNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AExpVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AExpLogicaVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AElseParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseParte pelseparteNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pelseparteNode1 = new AElseParte(listNode3);
        }
	nodeList.add(pelseparteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ACasoOpcao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasoOpcao pcasoopcaoNode1;
        {
            // Block
        PValor pvalorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pvalorNode2 = (PValor)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcasoopcaoNode1 = new ACasoOpcao(pvalorNode2, listNode4);
        }
	nodeList.add(pcasoopcaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce APadrao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPadrao ppadraoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        ppadraoNode1 = new APadrao(listNode3);
        }
	nodeList.add(ppadraoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce APasso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPasso ppassoNode1;
        {
            // Block
        TNumInt tnumintNode2;
        tnumintNode2 = (TNumInt)nodeArrayList2.get(0);

        ppassoNode1 = new APasso(tnumintNode2);
        }
	nodeList.add(ppassoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIPara piparaNode1;
        {
            // Block
        TNumInt tnumintNode2;
        tnumintNode2 = (TNumInt)nodeArrayList1.get(0);

        piparaNode1 = new AIPara(tnumintNode2);
        }
	nodeList.add(piparaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ANPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNPara pnparaNode1;
        {
            // Block
        TNumInt tnumintNode2;
        tnumintNode2 = (TNumInt)nodeArrayList1.get(0);

        pnparaNode1 = new ANPara(tnumintNode2);
        }
	nodeList.add(pnparaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASomaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASomaExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ATermoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMultTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExpParentesFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AExpParentesExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMenosExpFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AMenosExpExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AVariavelFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);

        pexpNode1 = new AVariavelExp(pvariavelNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AValorFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpNode1 = new AValorExp(pvalorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AMaisSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AMenosSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AProdutoMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ADivisaoMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AXorExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AXorExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AExpOuExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AOuExpOu */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOuExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AExpEExpOu */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AEExpE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AEExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AExpIgualExpE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AExpSimpIgualExpIgual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AExpSimpIgualExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AExpMultIgualExpIgual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AExpMultIgualExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AExpComparacaoExpIgual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AExpComparacaoExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AExpNaoExpIgual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANaoExpParentesExpNao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList2.get(0);

        pexplogicaNode1 = new ANaoExpParentesExpLogica(pexplogicaNode2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AExpParentesExpNao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AExpParentes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList2.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AExpAlter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AExpParentesAlter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList2.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AIgualIgualDiferente */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ADiferenteIgualDiferente */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AMaiorOpComparar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AMenorOpComparar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AMaiorIgualOpComparar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AMenorIgualOpComparar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ATerminal$DeclVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVariavel pvariavelNode1;
        pvariavelNode1 = (PVariavel)nodeArrayList1.get(0);
	if(pvariavelNode1 != null)
	{
	  listNode2.add(pvariavelNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ANonTerminal$DeclVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVariavel pvariavelNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvariavelNode2 = (PVariavel)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvariavelNode2 != null)
	{
	  listNode3.add(pvariavelNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ATerminal$ExpVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANonTerminal$ExpVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ATerminal$ExpLogicaVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	if(pexplogicaNode1 != null)
	{
	  listNode2.add(pexplogicaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ANonTerminal$ExpLogicaVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpLogica pexplogicaNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexplogicaNode2 = (PExpLogica)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexplogicaNode2 != null)
	{
	  listNode3.add(pexplogicaNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ATerminal$CasoOpcao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCasoOpcao pcasoopcaoNode1;
        pcasoopcaoNode1 = (PCasoOpcao)nodeArrayList1.get(0);
	if(pcasoopcaoNode1 != null)
	{
	  listNode2.add(pcasoopcaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ANonTerminal$CasoOpcao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCasoOpcao pcasoopcaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcasoopcaoNode2 = (PCasoOpcao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcasoopcaoNode2 != null)
	{
	  listNode3.add(pcasoopcaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {50, SHIFT, 3}, },
			{{-1, ERROR, 2}, {55, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {1, SHIFT, 4}, },
			{{-1, REDUCE, 1}, {3, SHIFT, 5}, {7, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 8}, },
			{{-1, ERROR, 5}, {50, SHIFT, 13}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 15}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 11}, {34, SHIFT, 26}, },
			{{-1, REDUCE, 2}, {3, SHIFT, 5}, {7, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 8}, },
			{{-1, ERROR, 13}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 14}, {36, SHIFT, 32}, },
			{{-1, ERROR, 15}, {36, SHIFT, 33}, },
			{{-1, ERROR, 16}, {36, SHIFT, 34}, },
			{{-1, ERROR, 17}, {36, SHIFT, 35}, },
			{{-1, ERROR, 18}, {36, SHIFT, 36}, },
			{{-1, ERROR, 19}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, ERROR, 20}, {50, SHIFT, 21}, },
			{{-1, REDUCE, 10}, {38, SHIFT, 39}, },
			{{-1, ERROR, 22}, {32, SHIFT, 40}, },
			{{-1, ERROR, 23}, {2, SHIFT, 41}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 16}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, ERROR, 26}, {50, SHIFT, 21}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 31}, {35, SHIFT, 46}, },
			{{-1, ERROR, 32}, {29, SHIFT, 47}, {36, SHIFT, 48}, {42, SHIFT, 49}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 33}, {50, SHIFT, 21}, },
			{{-1, ERROR, 34}, {29, SHIFT, 47}, {36, SHIFT, 48}, {42, SHIFT, 49}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 35}, {29, SHIFT, 47}, {36, SHIFT, 69}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 36}, {29, SHIFT, 47}, {36, SHIFT, 48}, {42, SHIFT, 49}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 37}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {18, SHIFT, 72}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, ERROR, 38}, {23, SHIFT, 73}, },
			{{-1, ERROR, 39}, {51, SHIFT, 74}, },
			{{-1, ERROR, 40}, {29, SHIFT, 47}, {36, SHIFT, 69}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 44}, {33, SHIFT, 76}, {35, SHIFT, 77}, },
			{{-1, ERROR, 45}, {50, SHIFT, 21}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 47}, {29, SHIFT, 47}, {36, SHIFT, 69}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 48}, {29, SHIFT, 47}, {36, SHIFT, 48}, {42, SHIFT, 49}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 49}, {36, SHIFT, 83}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 54}, {28, SHIFT, 85}, {29, SHIFT, 86}, {33, SHIFT, 87}, {37, SHIFT, 88}, {44, SHIFT, 89}, {45, SHIFT, 90}, {46, SHIFT, 91}, {47, SHIFT, 92}, {48, SHIFT, 93}, {49, SHIFT, 94}, },
			{{-1, REDUCE, 43}, {30, SHIFT, 98}, {31, SHIFT, 99}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 57}, {33, SHIFT, 101}, {37, SHIFT, 102}, {40, SHIFT, 103}, },
			{{-1, REDUCE, 55}, {41, SHIFT, 104}, },
			{{-1, REDUCE, 57}, {43, SHIFT, 105}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 65}, {44, SHIFT, 89}, {45, SHIFT, 90}, },
			{{-1, ERROR, 63}, {29, SHIFT, 47}, {36, SHIFT, 69}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 64}, {29, SHIFT, 47}, {36, SHIFT, 48}, {42, SHIFT, 49}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 65}, {33, SHIFT, 76}, {37, SHIFT, 111}, },
			{{-1, ERROR, 66}, {50, SHIFT, 21}, },
			{{-1, ERROR, 67}, {28, SHIFT, 85}, {29, SHIFT, 86}, {44, SHIFT, 89}, {45, SHIFT, 90}, {46, SHIFT, 91}, {47, SHIFT, 92}, {48, SHIFT, 93}, {49, SHIFT, 94}, },
			{{-1, ERROR, 68}, {37, SHIFT, 113}, {40, SHIFT, 103}, },
			{{-1, ERROR, 69}, {29, SHIFT, 47}, {36, SHIFT, 69}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 70}, {28, SHIFT, 85}, {29, SHIFT, 86}, {37, SHIFT, 115}, },
			{{-1, ERROR, 71}, {37, SHIFT, 116}, {40, SHIFT, 103}, },
			{{-1, ERROR, 72}, {36, SHIFT, 117}, },
			{{-1, ERROR, 73}, {51, SHIFT, 118}, },
			{{-1, ERROR, 74}, {39, SHIFT, 120}, },
			{{-1, ERROR, 75}, {28, SHIFT, 85}, {29, SHIFT, 86}, {35, SHIFT, 121}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 79}, {33, SHIFT, 76}, {35, SHIFT, 122}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 81}, {28, SHIFT, 85}, {29, SHIFT, 86}, {37, SHIFT, 123}, {44, SHIFT, 89}, {45, SHIFT, 90}, {46, SHIFT, 91}, {47, SHIFT, 92}, {48, SHIFT, 93}, {49, SHIFT, 94}, },
			{{-1, ERROR, 82}, {37, SHIFT, 124}, {40, SHIFT, 103}, },
			{{-1, ERROR, 83}, {29, SHIFT, 47}, {36, SHIFT, 48}, {42, SHIFT, 49}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 88}, {35, SHIFT, 125}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 95}, {29, SHIFT, 47}, {36, SHIFT, 69}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 96}, {29, SHIFT, 47}, {36, SHIFT, 69}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 97}, {29, SHIFT, 47}, {36, SHIFT, 69}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 100}, {29, SHIFT, 47}, {36, SHIFT, 69}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 102}, {35, SHIFT, 131}, },
			{{-1, ERROR, 103}, {29, SHIFT, 47}, {36, SHIFT, 48}, {42, SHIFT, 49}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 104}, {29, SHIFT, 47}, {36, SHIFT, 48}, {42, SHIFT, 49}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 105}, {29, SHIFT, 47}, {36, SHIFT, 48}, {42, SHIFT, 49}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 106}, {36, SHIFT, 135}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 108}, {28, SHIFT, 85}, {29, SHIFT, 86}, {33, SHIFT, 87}, {37, SHIFT, 137}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 110}, {33, SHIFT, 101}, {37, SHIFT, 138}, {40, SHIFT, 103}, },
			{{-1, ERROR, 111}, {35, SHIFT, 139}, },
			{{-1, ERROR, 112}, {33, SHIFT, 76}, {37, SHIFT, 140}, },
			{{-1, ERROR, 113}, {11, SHIFT, 141}, },
			{{-1, ERROR, 114}, {28, SHIFT, 85}, {29, SHIFT, 86}, {37, SHIFT, 123}, },
			{{-1, ERROR, 115}, {14, SHIFT, 142}, {15, SHIFT, 143}, {16, SHIFT, 144}, },
			{{-1, ERROR, 116}, {17, SHIFT, 148}, },
			{{-1, ERROR, 117}, {29, SHIFT, 47}, {36, SHIFT, 48}, {42, SHIFT, 49}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 119}, {18, SHIFT, 150}, {24, SHIFT, 151}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 42}, {30, SHIFT, 98}, {31, SHIFT, 99}, },
			{{-1, REDUCE, 67}, {28, SHIFT, 85}, {29, SHIFT, 86}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 54}, {41, SHIFT, 104}, },
			{{-1, REDUCE, 56}, {43, SHIFT, 105}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 135}, {29, SHIFT, 47}, {36, SHIFT, 48}, {42, SHIFT, 49}, {50, SHIFT, 21}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 137}, {35, SHIFT, 154}, },
			{{-1, ERROR, 138}, {35, SHIFT, 155}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 140}, {35, SHIFT, 156}, },
			{{-1, ERROR, 141}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, ERROR, 142}, {51, SHIFT, 28}, {52, SHIFT, 29}, {53, SHIFT, 30}, },
			{{-1, ERROR, 143}, {35, SHIFT, 159}, },
			{{-1, ERROR, 144}, {34, SHIFT, 160}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 146}, {15, SHIFT, 161}, },
			{{-1, ERROR, 147}, {14, SHIFT, 142}, {15, SHIFT, 162}, {16, SHIFT, 144}, },
			{{-1, ERROR, 148}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, ERROR, 149}, {37, SHIFT, 166}, {40, SHIFT, 103}, },
			{{-1, ERROR, 150}, {51, SHIFT, 167}, },
			{{-1, ERROR, 151}, {51, SHIFT, 169}, },
			{{-1, ERROR, 152}, {18, SHIFT, 170}, },
			{{-1, ERROR, 153}, {37, SHIFT, 171}, {40, SHIFT, 103}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 157}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {12, SHIFT, 172}, {13, SHIFT, 17}, {16, SHIFT, 173}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, ERROR, 158}, {34, SHIFT, 175}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 160}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, ERROR, 161}, {35, SHIFT, 177}, },
			{{-1, ERROR, 162}, {35, SHIFT, 178}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 164}, {15, SHIFT, 179}, },
			{{-1, ERROR, 165}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {20, SHIFT, 180}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, ERROR, 166}, {35, SHIFT, 181}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 168}, {17, SHIFT, 182}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 170}, {51, SHIFT, 167}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 172}, {35, SHIFT, 184}, },
			{{-1, ERROR, 173}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, ERROR, 174}, {12, SHIFT, 186}, },
			{{-1, ERROR, 175}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, REDUCE, 38}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 179}, {35, SHIFT, 188}, },
			{{-1, ERROR, 180}, {35, SHIFT, 189}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 182}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, ERROR, 183}, {17, SHIFT, 191}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 36}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, ERROR, 186}, {35, SHIFT, 192}, },
			{{-1, REDUCE, 37}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 190}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {27, SHIFT, 193}, {50, SHIFT, 21}, },
			{{-1, ERROR, 191}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {50, SHIFT, 21}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 193}, {35, SHIFT, 195}, },
			{{-1, ERROR, 194}, {5, SHIFT, 14}, {6, SHIFT, 15}, {10, SHIFT, 16}, {13, SHIFT, 17}, {19, SHIFT, 18}, {21, SHIFT, 19}, {22, SHIFT, 20}, {27, SHIFT, 196}, {50, SHIFT, 21}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 196}, {35, SHIFT, 197}, },
			{{-1, REDUCE, 33}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 9}, },
			{{-1, 10}, {12, 27}, },
			{{-1, 43}, {45, 78}, {66, 78}, },
			{{-1, 11}, },
			{{-1, 50}, {9, 22}, {19, 22}, {20, 38}, {25, 22}, {26, 44}, {33, 65}, {37, 22}, {45, 79}, {66, 112}, {141, 22}, {148, 22}, {157, 22}, {160, 22}, {165, 22}, {173, 22}, {175, 22}, {176, 22}, {182, 22}, {185, 22}, {187, 22}, {190, 22}, {191, 22}, {194, 22}, },
			{{-1, 51}, {13, 31}, {142, 158}, },
			{{-1, 23}, },
			{{-1, 24}, {25, 42}, {37, 42}, {157, 42}, {165, 42}, {176, 42}, {185, 42}, {187, 42}, {190, 42}, {194, 42}, },
			{{-1, 52}, {63, 107}, },
			{{-1, 53}, {64, 109}, },
			{{-1, 174}, },
			{{-1, 145}, {147, 163}, },
			{{-1, 146}, {147, 164}, },
			{{-1, 152}, },
			{{-1, 119}, },
			{{-1, 168}, {170, 183}, },
			{{-1, 67}, {32, 54}, {35, 70}, {40, 75}, {48, 81}, {63, 108}, {69, 114}, {96, 127}, {97, 127}, },
			{{-1, 55}, {95, 126}, },
			{{-1, 56}, {47, 80}, {100, 130}, },
			{{-1, 95}, },
			{{-1, 100}, },
			{{-1, 82}, {32, 57}, {34, 68}, {36, 71}, {64, 110}, {117, 149}, {135, 153}, },
			{{-1, 58}, {103, 132}, },
			{{-1, 59}, {104, 133}, },
			{{-1, 60}, {105, 134}, },
			{{-1, 61}, },
			{{-1, 62}, {49, 84}, },
			{{-1, 128}, {97, 129}, },
			{{-1, 136}, },
			{{-1, 96}, {62, 106}, },
			{{-1, 97}, },
			{{-1, 12}, },
			{{-1, 45}, {33, 66}, },
			{{-1, 25}, {19, 37}, {141, 157}, {148, 165}, {160, 176}, {173, 185}, {175, 187}, {182, 190}, {191, 194}, },
			{{-1, 63}, },
			{{-1, 64}, },
			{{-1, 147}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: identificador",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'fim.', 'const', 'escreva', 'leia', 'inteiro', 'real', 'caractere', 'se', 'avalie', 'enquanto', 'repita', 'para', identificador",
			"expecting: ':'",
			"expecting: 'fim.', 'escreva', 'leia', 'se', 'avalie', 'enquanto', 'repita', 'para', identificador",
			"expecting: num int, num real, string",
			"expecting: '('",
			"expecting: 'escreva', 'leia', 'se', 'avalie', 'enquanto', 'repita', 'para', identificador",
			"expecting: 'de', '+', '-', '*', '/', '<-', ',', ';', ')', '[', 'xor', 'ou', 'e', '=', '<>', '>', '<', '>=', '<='",
			"expecting: '<-'",
			"expecting: 'fim.'",
			"expecting: 'fim.', 'escreva', 'leia', 'se', fim se, 'avalie', 'caso', fim avalie, 'senao', 'ate', 'enquanto', fim enquanto, 'repita', 'para', fim para, identificador",
			"expecting: '+', '-', '*', '/', ',', ':', ';', ')', 'xor', 'ou', 'e', '=', '<>', '>', '<', '>=', '<='",
			"expecting: ';'",
			"expecting: '-', '(', 'nao', identificador, num int, num real, string",
			"expecting: '-', '(', identificador, num int, num real, string",
			"expecting: 'escreva', 'leia', 'se', 'avalie', 'ate', 'enquanto', 'repita', 'para', identificador",
			"expecting: 'de'",
			"expecting: num int",
			"expecting: ',', ';'",
			"expecting: '+', '-', '*', '/', ',', ';', ')', 'xor', 'ou', 'e', '=', '<>', '>', '<', '>=', '<='",
			"expecting: '+', '-', ',', ')', '=', '<>', '>', '<', '>=', '<='",
			"expecting: ',', ')', 'xor'",
			"expecting: ',', ')', 'xor', 'ou'",
			"expecting: ',', ')', 'xor', 'ou', 'e'",
			"expecting: ',', ')', 'xor', 'ou', 'e', '=', '<>'",
			"expecting: ',', ')'",
			"expecting: '+', '-', '=', '<>', '>', '<', '>=', '<='",
			"expecting: ')', 'xor'",
			"expecting: '+', '-', ')'",
			"expecting: ']'",
			"expecting: '+', '-', ';'",
			"expecting: '+', '-', ')', '=', '<>', '>', '<', '>=', '<='",
			"expecting: '+', '-', ',', ')'",
			"expecting: 'entao'",
			"expecting: 'caso', fim avalie, 'senao'",
			"expecting: 'faca'",
			"expecting: 'ate', 'passo'",
			"expecting: 'de', '+', '-', '*', '/', '<-', ',', ';', ')', 'xor', 'ou', 'e', '=', '<>', '>', '<', '>=', '<='",
			"expecting: '+', '-', ',', ')', 'xor', 'ou', 'e'",
			"expecting: fim avalie",
			"expecting: 'ate'",
			"expecting: 'escreva', 'leia', 'se', fim se, 'avalie', 'senao', 'enquanto', 'repita', 'para', identificador",
			"expecting: 'escreva', 'leia', 'se', 'avalie', 'enquanto', fim enquanto, 'repita', 'para', identificador",
			"expecting: fim se",
			"expecting: 'escreva', 'leia', 'se', 'avalie', fim avalie, 'enquanto', 'repita', 'para', identificador",
			"expecting: 'escreva', 'leia', 'se', fim se, 'avalie', 'enquanto', 'repita', 'para', identificador",
			"expecting: 'escreva', 'leia', 'se', 'avalie', 'caso', fim avalie, 'senao', 'enquanto', 'repita', 'para', identificador",
			"expecting: 'escreva', 'leia', 'se', 'avalie', 'enquanto', 'repita', 'para', fim para, identificador",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 5, 5, 5, 6, 4, 5, 4, 7, 8, 8, 8, 8, 8, 9, 1, 10, 11, 12, 13, 6, 1, 4, 14, 14, 14, 15, 16, 1, 16, 17, 16, 18, 19, 20, 17, 2, 13, 1, 21, 1, 4, 17, 16, 8, 22, 22, 17, 16, 23, 22, 22, 24, 25, 26, 26, 26, 27, 17, 16, 28, 1, 29, 30, 17, 31, 30, 8, 20, 32, 33, 1, 4, 1, 21, 22, 34, 30, 16, 26, 17, 17, 17, 15, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 15, 16, 16, 16, 8, 17, 35, 16, 24, 15, 28, 36, 31, 37, 38, 16, 39, 39, 40, 13, 4, 22, 27, 13, 22, 41, 26, 26, 22, 13, 25, 26, 26, 16, 26, 15, 15, 13, 15, 9, 7, 15, 5, 37, 42, 37, 9, 30, 20, 20, 43, 30, 13, 13, 13, 44, 5, 13, 9, 15, 15, 37, 42, 45, 15, 38, 38, 43, 20, 26, 15, 9, 46, 9, 47, 13, 13, 15, 15, 13, 9, 38, 13, 48, 15, 49, 13, 13, 50, 9, 13, 15, 50, 13, 15, 13, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
