/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.analysis;

import portugol.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPrograma(APrograma node);
    void caseAVariavelDeclaracao(AVariavelDeclaracao node);
    void caseAConstDeclaracao(AConstDeclaracao node);
    void caseADeclVar(ADeclVar node);
    void caseARealTipo(ARealTipo node);
    void caseAIntTipo(AIntTipo node);
    void caseACharTipo(ACharTipo node);
    void caseAIdVariavel(AIdVariavel node);
    void caseAVetorVariavel(AVetorVariavel node);
    void caseAStringValor(AStringValor node);
    void caseANumIntValor(ANumIntValor node);
    void caseANumRealValor(ANumRealValor node);
    void caseAAtribuicaoComando(AAtribuicaoComando node);
    void caseALeiaComando(ALeiaComando node);
    void caseAEscrevaExpComando(AEscrevaExpComando node);
    void caseAEscrevaExpLogicaComando(AEscrevaExpLogicaComando node);
    void caseASeComando(ASeComando node);
    void caseAAvalieComando(AAvalieComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseARepitaComando(ARepitaComando node);
    void caseAParaComando(AParaComando node);
    void caseAExpVirgula(AExpVirgula node);
    void caseAExpLogicaVirgula(AExpLogicaVirgula node);
    void caseAElseParte(AElseParte node);
    void caseACasoOpcao(ACasoOpcao node);
    void caseAPadrao(APadrao node);
    void caseAPasso(APasso node);
    void caseAIPara(AIPara node);
    void caseANPara(ANPara node);
    void caseAMenosExpExp(AMenosExpExp node);
    void caseASomaExp(ASomaExp node);
    void caseAProdutoTermo(AProdutoTermo node);
    void caseAExpParentesFator(AExpParentesFator node);
    void caseAVariavelFator(AVariavelFator node);
    void caseAValorFator(AValorFator node);
    void caseAMaisSoma(AMaisSoma node);
    void caseAMenosSoma(AMenosSoma node);
    void caseAProdutoMult(AProdutoMult node);
    void caseADivisaoMult(ADivisaoMult node);
    void caseASomaExpTermo(ASomaExpTermo node);
    void caseAMultFator(AMultFator node);
    void caseAXorExpLogica(AXorExpLogica node);
    void caseAExpOuExpLogica(AExpOuExpLogica node);
    void caseAOuExpOu(AOuExpOu node);
    void caseAExpEExpOu(AExpEExpOu node);
    void caseAEExpE(AEExpE node);
    void caseAExpIgualExpE(AExpIgualExpE node);
    void caseAExpIgual(AExpIgual node);
    void caseAExpMultIgualExpIgual(AExpMultIgualExpIgual node);
    void caseAExpComparacaoExpIgual(AExpComparacaoExpIgual node);
    void caseAExpMultIgual(AExpMultIgual node);
    void caseAExpComparacao(AExpComparacao node);
    void caseAExpNaoExpComparacao(AExpNaoExpComparacao node);
    void caseANaoExpParentesExpNao(ANaoExpParentesExpNao node);
    void caseAExpParentesExpNao(AExpParentesExpNao node);
    void caseAExpParentes(AExpParentes node);
    void caseAIgualIgualDiferente(AIgualIgualDiferente node);
    void caseADiferenteIgualDiferente(ADiferenteIgualDiferente node);
    void caseAMaiorOpComparar(AMaiorOpComparar node);
    void caseAMenorOpComparar(AMenorOpComparar node);
    void caseAMaiorIgualOpComparar(AMaiorIgualOpComparar node);
    void caseAMenorIgualOpComparar(AMenorIgualOpComparar node);

    void caseTPrograma(TPrograma node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTConst(TConst node);
    void caseTVar(TVar node);
    void caseTEscreva(TEscreva node);
    void caseTLeia(TLeia node);
    void caseTInteiro(TInteiro node);
    void caseTReal(TReal node);
    void caseTCaractere(TCaractere node);
    void caseTSe(TSe node);
    void caseTEntao(TEntao node);
    void caseTFimSe(TFimSe node);
    void caseTAvalie(TAvalie node);
    void caseTCaso(TCaso node);
    void caseTFimAvalie(TFimAvalie node);
    void caseTSenao(TSenao node);
    void caseTFaca(TFaca node);
    void caseTAte(TAte node);
    void caseTEnquanto(TEnquanto node);
    void caseTFimEnquanto(TFimEnquanto node);
    void caseTRepita(TRepita node);
    void caseTPara(TPara node);
    void caseTDe(TDe node);
    void caseTPasso(TPasso node);
    void caseTPare(TPare node);
    void caseTContinue(TContinue node);
    void caseTFimPara(TFimPara node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTProduto(TProduto node);
    void caseTDivisao(TDivisao node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTVirgula(TVirgula node);
    void caseTDoisPts(TDoisPts node);
    void caseTPtVirg(TPtVirg node);
    void caseTAbreParantes(TAbreParantes node);
    void caseTFechaParentes(TFechaParentes node);
    void caseTAbreColchete(TAbreColchete node);
    void caseTFechaColchete(TFechaColchete node);
    void caseTXor(TXor node);
    void caseTOu(TOu node);
    void caseTNao(TNao node);
    void caseTE(TE node);
    void caseTIgual(TIgual node);
    void caseTDiferente(TDiferente node);
    void caseTMaior(TMaior node);
    void caseTMenor(TMenor node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTIdentificador(TIdentificador node);
    void caseTNumInt(TNumInt node);
    void caseTNumReal(TNumReal node);
    void caseTString(TString node);
    void caseTAllEspaco(TAllEspaco node);
    void caseTComentLinha(TComentLinha node);
    void caseTComentAninhado(TComentAninhado node);
    void caseTComentEscopo(TComentEscopo node);
    void caseTComentEstrela(TComentEstrela node);
    void caseTComentBarra(TComentBarra node);
    void caseTComentFim(TComentFim node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
