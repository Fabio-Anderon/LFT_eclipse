/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.analysis;

import java.util.*;
import portugol.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        outAPrograma(node);
    }

    public void inAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        inAVariavelDeclaracao(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPts() != null)
        {
            node.getDoisPts().apply(this);
        }
        {
            List<PDeclVar> copy = new ArrayList<PDeclVar>(node.getDeclVar());
            for(PDeclVar e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getPtVirg() != null)
        {
            node.getPtVirg().apply(this);
        }
        outAVariavelDeclaracao(node);
    }

    public void inAConstDeclaracao(AConstDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAConstDeclaracao(AConstDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDeclaracao(AConstDeclaracao node)
    {
        inAConstDeclaracao(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getPtVirg() != null)
        {
            node.getPtVirg().apply(this);
        }
        outAConstDeclaracao(node);
    }

    public void inADeclVar(ADeclVar node)
    {
        defaultIn(node);
    }

    public void outADeclVar(ADeclVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclVar(ADeclVar node)
    {
        inADeclVar(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outADeclVar(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAIntTipo(AIntTipo node)
    {
        defaultIn(node);
    }

    public void outAIntTipo(AIntTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipo(AIntTipo node)
    {
        inAIntTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAIntTipo(node);
    }

    public void inACharTipo(ACharTipo node)
    {
        defaultIn(node);
    }

    public void outACharTipo(ACharTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharTipo(ACharTipo node)
    {
        inACharTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACharTipo(node);
    }

    public void inAIdVariavel(AIdVariavel node)
    {
        defaultIn(node);
    }

    public void outAIdVariavel(AIdVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVariavel(AIdVariavel node)
    {
        inAIdVariavel(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdVariavel(node);
    }

    public void inAVetorVariavel(AVetorVariavel node)
    {
        defaultIn(node);
    }

    public void outAVetorVariavel(AVetorVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVariavel(AVetorVariavel node)
    {
        inAVetorVariavel(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getAbreColchete() != null)
        {
            node.getAbreColchete().apply(this);
        }
        if(node.getNumInt() != null)
        {
            node.getNumInt().apply(this);
        }
        if(node.getFechaColchete() != null)
        {
            node.getFechaColchete().apply(this);
        }
        outAVetorVariavel(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inANumIntValor(ANumIntValor node)
    {
        defaultIn(node);
    }

    public void outANumIntValor(ANumIntValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumIntValor(ANumIntValor node)
    {
        inANumIntValor(node);
        if(node.getNumInt() != null)
        {
            node.getNumInt().apply(this);
        }
        outANumIntValor(node);
    }

    public void inANumRealValor(ANumRealValor node)
    {
        defaultIn(node);
    }

    public void outANumRealValor(ANumRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumRealValor(ANumRealValor node)
    {
        inANumRealValor(node);
        if(node.getNumReal() != null)
        {
            node.getNumReal().apply(this);
        }
        outANumRealValor(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPtVirg() != null)
        {
            node.getPtVirg().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inALeiaComando(ALeiaComando node)
    {
        defaultIn(node);
    }

    public void outALeiaComando(ALeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComando(ALeiaComando node)
    {
        inALeiaComando(node);
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        if(node.getAbreParantes() != null)
        {
            node.getAbreParantes().apply(this);
        }
        {
            List<PDeclVar> copy = new ArrayList<PDeclVar>(node.getDeclVar());
            for(PDeclVar e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getFechaParentes() != null)
        {
            node.getFechaParentes().apply(this);
        }
        if(node.getPtVirg() != null)
        {
            node.getPtVirg().apply(this);
        }
        outALeiaComando(node);
    }

    public void inAEscrevaExpComando(AEscrevaExpComando node)
    {
        defaultIn(node);
    }

    public void outAEscrevaExpComando(AEscrevaExpComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaExpComando(AEscrevaExpComando node)
    {
        inAEscrevaExpComando(node);
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        if(node.getAbreParantes() != null)
        {
            node.getAbreParantes().apply(this);
        }
        {
            List<PExpVirgula> copy = new ArrayList<PExpVirgula>(node.getExpVirgula());
            for(PExpVirgula e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParentes() != null)
        {
            node.getFechaParentes().apply(this);
        }
        if(node.getPtVirg() != null)
        {
            node.getPtVirg().apply(this);
        }
        outAEscrevaExpComando(node);
    }

    public void inAEscrevaExpLogicaComando(AEscrevaExpLogicaComando node)
    {
        defaultIn(node);
    }

    public void outAEscrevaExpLogicaComando(AEscrevaExpLogicaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaExpLogicaComando(AEscrevaExpLogicaComando node)
    {
        inAEscrevaExpLogicaComando(node);
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        if(node.getAbreParantes() != null)
        {
            node.getAbreParantes().apply(this);
        }
        {
            List<PExpLogicaVirgula> copy = new ArrayList<PExpLogicaVirgula>(node.getExpLogicaVirgula());
            for(PExpLogicaVirgula e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParentes() != null)
        {
            node.getFechaParentes().apply(this);
        }
        if(node.getPtVirg() != null)
        {
            node.getPtVirg().apply(this);
        }
        outAEscrevaExpLogicaComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParantes() != null)
        {
            node.getAbreParantes().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParentes() != null)
        {
            node.getFechaParentes().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getElseParte() != null)
        {
            node.getElseParte().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getPtVirg() != null)
        {
            node.getPtVirg().apply(this);
        }
        outASeComando(node);
    }

    public void inAAvalieComando(AAvalieComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieComando(AAvalieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComando(AAvalieComando node)
    {
        inAAvalieComando(node);
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        if(node.getAbreParantes() != null)
        {
            node.getAbreParantes().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParentes() != null)
        {
            node.getFechaParentes().apply(this);
        }
        {
            List<PCasoOpcao> copy = new ArrayList<PCasoOpcao>(node.getCasoOpcao());
            for(PCasoOpcao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPadrao() != null)
        {
            node.getPadrao().apply(this);
        }
        if(node.getFimAvalie() != null)
        {
            node.getFimAvalie().apply(this);
        }
        if(node.getPtVirg() != null)
        {
            node.getPtVirg().apply(this);
        }
        outAAvalieComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getAbreParantes() != null)
        {
            node.getAbreParantes().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParentes() != null)
        {
            node.getFechaParentes().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFimEnquanto() != null)
        {
            node.getFimEnquanto().apply(this);
        }
        if(node.getPtVirg() != null)
        {
            node.getPtVirg().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getAbreParantes() != null)
        {
            node.getAbreParantes().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParentes() != null)
        {
            node.getFechaParentes().apply(this);
        }
        if(node.getPtVirg() != null)
        {
            node.getPtVirg().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getIPara() != null)
        {
            node.getIPara().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getNPara() != null)
        {
            node.getNPara().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getPtVirg() != null)
        {
            node.getPtVirg().apply(this);
        }
        outAParaComando(node);
    }

    public void inAExpVirgula(AExpVirgula node)
    {
        defaultIn(node);
    }

    public void outAExpVirgula(AExpVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpVirgula(AExpVirgula node)
    {
        inAExpVirgula(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAExpVirgula(node);
    }

    public void inAExpLogicaVirgula(AExpLogicaVirgula node)
    {
        defaultIn(node);
    }

    public void outAExpLogicaVirgula(AExpLogicaVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogicaVirgula(AExpLogicaVirgula node)
    {
        inAExpLogicaVirgula(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAExpLogicaVirgula(node);
    }

    public void inAElseParte(AElseParte node)
    {
        defaultIn(node);
    }

    public void outAElseParte(AElseParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseParte(AElseParte node)
    {
        inAElseParte(node);
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAElseParte(node);
    }

    public void inACasoOpcao(ACasoOpcao node)
    {
        defaultIn(node);
    }

    public void outACasoOpcao(ACasoOpcao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoOpcao(ACasoOpcao node)
    {
        inACasoOpcao(node);
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getDoisPts() != null)
        {
            node.getDoisPts().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outACasoOpcao(node);
    }

    public void inAPadrao(APadrao node)
    {
        defaultIn(node);
    }

    public void outAPadrao(APadrao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPadrao(APadrao node)
    {
        inAPadrao(node);
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getDoisPts() != null)
        {
            node.getDoisPts().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAPadrao(node);
    }

    public void inAPasso(APasso node)
    {
        defaultIn(node);
    }

    public void outAPasso(APasso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPasso(APasso node)
    {
        inAPasso(node);
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getNumInt() != null)
        {
            node.getNumInt().apply(this);
        }
        outAPasso(node);
    }

    public void inAIPara(AIPara node)
    {
        defaultIn(node);
    }

    public void outAIPara(AIPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIPara(AIPara node)
    {
        inAIPara(node);
        if(node.getNumInt() != null)
        {
            node.getNumInt().apply(this);
        }
        outAIPara(node);
    }

    public void inANPara(ANPara node)
    {
        defaultIn(node);
    }

    public void outANPara(ANPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANPara(ANPara node)
    {
        inANPara(node);
        if(node.getNumInt() != null)
        {
            node.getNumInt().apply(this);
        }
        outANPara(node);
    }

    public void inAMenosExpExp(AMenosExpExp node)
    {
        defaultIn(node);
    }

    public void outAMenosExpExp(AMenosExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpExp(AMenosExpExp node)
    {
        inAMenosExpExp(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMenosExpExp(node);
    }

    public void inASomaExp(ASomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaExp(ASomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExp(ASomaExp node)
    {
        inASomaExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        {
            List<PSomaExpTermo> copy = new ArrayList<PSomaExpTermo>(node.getSomaExpTermo());
            for(PSomaExpTermo e : copy)
            {
                e.apply(this);
            }
        }
        outASomaExp(node);
    }

    public void inAProdutoTermo(AProdutoTermo node)
    {
        defaultIn(node);
    }

    public void outAProdutoTermo(AProdutoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProdutoTermo(AProdutoTermo node)
    {
        inAProdutoTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        {
            List<PMultFator> copy = new ArrayList<PMultFator>(node.getMultFator());
            for(PMultFator e : copy)
            {
                e.apply(this);
            }
        }
        outAProdutoTermo(node);
    }

    public void inAExpParentesFator(AExpParentesFator node)
    {
        defaultIn(node);
    }

    public void outAExpParentesFator(AExpParentesFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpParentesFator(AExpParentesFator node)
    {
        inAExpParentesFator(node);
        if(node.getAbreParantes() != null)
        {
            node.getAbreParantes().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParentes() != null)
        {
            node.getFechaParentes().apply(this);
        }
        outAExpParentesFator(node);
    }

    public void inAVariavelFator(AVariavelFator node)
    {
        defaultIn(node);
    }

    public void outAVariavelFator(AVariavelFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelFator(AVariavelFator node)
    {
        inAVariavelFator(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVariavelFator(node);
    }

    public void inAValorFator(AValorFator node)
    {
        defaultIn(node);
    }

    public void outAValorFator(AValorFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorFator(AValorFator node)
    {
        inAValorFator(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorFator(node);
    }

    public void inAMaisSoma(AMaisSoma node)
    {
        defaultIn(node);
    }

    public void outAMaisSoma(AMaisSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisSoma(AMaisSoma node)
    {
        inAMaisSoma(node);
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        outAMaisSoma(node);
    }

    public void inAMenosSoma(AMenosSoma node)
    {
        defaultIn(node);
    }

    public void outAMenosSoma(AMenosSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosSoma(AMenosSoma node)
    {
        inAMenosSoma(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosSoma(node);
    }

    public void inAProdutoMult(AProdutoMult node)
    {
        defaultIn(node);
    }

    public void outAProdutoMult(AProdutoMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProdutoMult(AProdutoMult node)
    {
        inAProdutoMult(node);
        if(node.getProduto() != null)
        {
            node.getProduto().apply(this);
        }
        outAProdutoMult(node);
    }

    public void inADivisaoMult(ADivisaoMult node)
    {
        defaultIn(node);
    }

    public void outADivisaoMult(ADivisaoMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoMult(ADivisaoMult node)
    {
        inADivisaoMult(node);
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        outADivisaoMult(node);
    }

    public void inASomaExpTermo(ASomaExpTermo node)
    {
        defaultIn(node);
    }

    public void outASomaExpTermo(ASomaExpTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpTermo(ASomaExpTermo node)
    {
        inASomaExpTermo(node);
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outASomaExpTermo(node);
    }

    public void inAMultFator(AMultFator node)
    {
        defaultIn(node);
    }

    public void outAMultFator(AMultFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFator(AMultFator node)
    {
        inAMultFator(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMultFator(node);
    }

    public void inAXorExpLogica(AXorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAXorExpLogica(AXorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExpLogica(AXorExpLogica node)
    {
        inAXorExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getExpOu() != null)
        {
            node.getExpOu().apply(this);
        }
        outAXorExpLogica(node);
    }

    public void inAExpOuExpLogica(AExpOuExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpOuExpLogica(AExpOuExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpOuExpLogica(AExpOuExpLogica node)
    {
        inAExpOuExpLogica(node);
        if(node.getExpOu() != null)
        {
            node.getExpOu().apply(this);
        }
        outAExpOuExpLogica(node);
    }

    public void inAOuExpOu(AOuExpOu node)
    {
        defaultIn(node);
    }

    public void outAOuExpOu(AOuExpOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpOu(AOuExpOu node)
    {
        inAOuExpOu(node);
        if(node.getExpOu() != null)
        {
            node.getExpOu().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExpE() != null)
        {
            node.getExpE().apply(this);
        }
        outAOuExpOu(node);
    }

    public void inAExpEExpOu(AExpEExpOu node)
    {
        defaultIn(node);
    }

    public void outAExpEExpOu(AExpEExpOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpEExpOu(AExpEExpOu node)
    {
        inAExpEExpOu(node);
        if(node.getExpE() != null)
        {
            node.getExpE().apply(this);
        }
        outAExpEExpOu(node);
    }

    public void inAEExpE(AEExpE node)
    {
        defaultIn(node);
    }

    public void outAEExpE(AEExpE node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExpE(AEExpE node)
    {
        inAEExpE(node);
        if(node.getExpE() != null)
        {
            node.getExpE().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getExpIgual() != null)
        {
            node.getExpIgual().apply(this);
        }
        outAEExpE(node);
    }

    public void inAExpIgualExpE(AExpIgualExpE node)
    {
        defaultIn(node);
    }

    public void outAExpIgualExpE(AExpIgualExpE node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpIgualExpE(AExpIgualExpE node)
    {
        inAExpIgualExpE(node);
        if(node.getExpIgual() != null)
        {
            node.getExpIgual().apply(this);
        }
        outAExpIgualExpE(node);
    }

    public void inAExpIgual(AExpIgual node)
    {
        defaultIn(node);
    }

    public void outAExpIgual(AExpIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpIgual(AExpIgual node)
    {
        inAExpIgual(node);
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        if(node.getIgualDiferente() != null)
        {
            node.getIgualDiferente().apply(this);
        }
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        outAExpIgual(node);
    }

    public void inAExpComparacaoExpIgual(AExpComparacaoExpIgual node)
    {
        defaultIn(node);
    }

    public void outAExpComparacaoExpIgual(AExpComparacaoExpIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpComparacaoExpIgual(AExpComparacaoExpIgual node)
    {
        inAExpComparacaoExpIgual(node);
        if(node.getExpComparacao() != null)
        {
            node.getExpComparacao().apply(this);
        }
        outAExpComparacaoExpIgual(node);
    }

    public void inAExpComparacao(AExpComparacao node)
    {
        defaultIn(node);
    }

    public void outAExpComparacao(AExpComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpComparacao(AExpComparacao node)
    {
        inAExpComparacao(node);
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        if(node.getOpComparar() != null)
        {
            node.getOpComparar().apply(this);
        }
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        outAExpComparacao(node);
    }

    public void inAExpNaoExpComparacao(AExpNaoExpComparacao node)
    {
        defaultIn(node);
    }

    public void outAExpNaoExpComparacao(AExpNaoExpComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpNaoExpComparacao(AExpNaoExpComparacao node)
    {
        inAExpNaoExpComparacao(node);
        if(node.getExpNao() != null)
        {
            node.getExpNao().apply(this);
        }
        outAExpNaoExpComparacao(node);
    }

    public void inANaoExpParentesExpNao(ANaoExpParentesExpNao node)
    {
        defaultIn(node);
    }

    public void outANaoExpParentesExpNao(ANaoExpParentesExpNao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExpParentesExpNao(ANaoExpParentesExpNao node)
    {
        inANaoExpParentesExpNao(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        if(node.getExpParentes() != null)
        {
            node.getExpParentes().apply(this);
        }
        outANaoExpParentesExpNao(node);
    }

    public void inAExpParentesExpNao(AExpParentesExpNao node)
    {
        defaultIn(node);
    }

    public void outAExpParentesExpNao(AExpParentesExpNao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpParentesExpNao(AExpParentesExpNao node)
    {
        inAExpParentesExpNao(node);
        if(node.getExpParentes() != null)
        {
            node.getExpParentes().apply(this);
        }
        outAExpParentesExpNao(node);
    }

    public void inAExpParentes(AExpParentes node)
    {
        defaultIn(node);
    }

    public void outAExpParentes(AExpParentes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpParentes(AExpParentes node)
    {
        inAExpParentes(node);
        if(node.getAbreParantes() != null)
        {
            node.getAbreParantes().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParentes() != null)
        {
            node.getFechaParentes().apply(this);
        }
        outAExpParentes(node);
    }

    public void inAIgualIgualDiferente(AIgualIgualDiferente node)
    {
        defaultIn(node);
    }

    public void outAIgualIgualDiferente(AIgualIgualDiferente node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualIgualDiferente(AIgualIgualDiferente node)
    {
        inAIgualIgualDiferente(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAIgualIgualDiferente(node);
    }

    public void inADiferenteIgualDiferente(ADiferenteIgualDiferente node)
    {
        defaultIn(node);
    }

    public void outADiferenteIgualDiferente(ADiferenteIgualDiferente node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteIgualDiferente(ADiferenteIgualDiferente node)
    {
        inADiferenteIgualDiferente(node);
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        outADiferenteIgualDiferente(node);
    }

    public void inAMaiorOpComparar(AMaiorOpComparar node)
    {
        defaultIn(node);
    }

    public void outAMaiorOpComparar(AMaiorOpComparar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorOpComparar(AMaiorOpComparar node)
    {
        inAMaiorOpComparar(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorOpComparar(node);
    }

    public void inAMenorOpComparar(AMenorOpComparar node)
    {
        defaultIn(node);
    }

    public void outAMenorOpComparar(AMenorOpComparar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorOpComparar(AMenorOpComparar node)
    {
        inAMenorOpComparar(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorOpComparar(node);
    }

    public void inAMaiorIgualOpComparar(AMaiorIgualOpComparar node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualOpComparar(AMaiorIgualOpComparar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualOpComparar(AMaiorIgualOpComparar node)
    {
        inAMaiorIgualOpComparar(node);
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        outAMaiorIgualOpComparar(node);
    }

    public void inAMenorIgualOpComparar(AMenorIgualOpComparar node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualOpComparar(AMenorIgualOpComparar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualOpComparar(AMenorIgualOpComparar node)
    {
        inAMenorIgualOpComparar(node);
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        outAMenorIgualOpComparar(node);
    }
}
