/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.node;

import java.util.*;
import portugol.analysis.*;

@SuppressWarnings("nls")
public final class AProdutoTermo extends PTermo
{
    private PFator _fator_;
    private final LinkedList<PMultFator> _multFator_ = new LinkedList<PMultFator>();

    public AProdutoTermo()
    {
        // Constructor
    }

    public AProdutoTermo(
        @SuppressWarnings("hiding") PFator _fator_,
        @SuppressWarnings("hiding") List<?> _multFator_)
    {
        // Constructor
        setFator(_fator_);

        setMultFator(_multFator_);

    }

    @Override
    public Object clone()
    {
        return new AProdutoTermo(
            cloneNode(this._fator_),
            cloneList(this._multFator_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProdutoTermo(this);
    }

    public PFator getFator()
    {
        return this._fator_;
    }

    public void setFator(PFator node)
    {
        if(this._fator_ != null)
        {
            this._fator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fator_ = node;
    }

    public LinkedList<PMultFator> getMultFator()
    {
        return this._multFator_;
    }

    public void setMultFator(List<?> list)
    {
        for(PMultFator e : this._multFator_)
        {
            e.parent(null);
        }
        this._multFator_.clear();

        for(Object obj_e : list)
        {
            PMultFator e = (PMultFator) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._multFator_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fator_)
            + toString(this._multFator_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fator_ == child)
        {
            this._fator_ = null;
            return;
        }

        if(this._multFator_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fator_ == oldChild)
        {
            setFator((PFator) newChild);
            return;
        }

        for(ListIterator<PMultFator> i = this._multFator_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMultFator) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
