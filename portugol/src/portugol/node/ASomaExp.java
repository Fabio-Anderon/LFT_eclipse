/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.node;

import java.util.*;
import portugol.analysis.*;

@SuppressWarnings("nls")
public final class ASomaExp extends PExp
{
    private PTermo _termo_;
    private final LinkedList<PSomaExpTermo> _somaExpTermo_ = new LinkedList<PSomaExpTermo>();

    public ASomaExp()
    {
        // Constructor
    }

    public ASomaExp(
        @SuppressWarnings("hiding") PTermo _termo_,
        @SuppressWarnings("hiding") List<?> _somaExpTermo_)
    {
        // Constructor
        setTermo(_termo_);

        setSomaExpTermo(_somaExpTermo_);

    }

    @Override
    public Object clone()
    {
        return new ASomaExp(
            cloneNode(this._termo_),
            cloneList(this._somaExpTermo_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASomaExp(this);
    }

    public PTermo getTermo()
    {
        return this._termo_;
    }

    public void setTermo(PTermo node)
    {
        if(this._termo_ != null)
        {
            this._termo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._termo_ = node;
    }

    public LinkedList<PSomaExpTermo> getSomaExpTermo()
    {
        return this._somaExpTermo_;
    }

    public void setSomaExpTermo(List<?> list)
    {
        for(PSomaExpTermo e : this._somaExpTermo_)
        {
            e.parent(null);
        }
        this._somaExpTermo_.clear();

        for(Object obj_e : list)
        {
            PSomaExpTermo e = (PSomaExpTermo) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._somaExpTermo_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._termo_)
            + toString(this._somaExpTermo_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._termo_ == child)
        {
            this._termo_ = null;
            return;
        }

        if(this._somaExpTermo_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._termo_ == oldChild)
        {
            setTermo((PTermo) newChild);
            return;
        }

        for(ListIterator<PSomaExpTermo> i = this._somaExpTermo_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PSomaExpTermo) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
