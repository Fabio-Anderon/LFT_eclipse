/*Autor: Anderson Nunes
      Fabio Nascimento
*/

Package portugol;

Helpers

            //ascii_char = [32 .. 127];
            all_char = [0..0xffff];

      //letras e digitos
            
            letras_minus = ['a'..'z'] ; 
            letras_maius = ['A'..'Z'] ;
            digitos = ['0'..'9'] ;
            sublinhado = '_' ;
            aspas_simples = 39;
            //aspas = 34 | 39;
            barraestrela = '/*';
            barrainvert = 92;


      //caracteres nao impressos
            tab = 9;    //horizontal tab
            cr = 13;    //carriage return
            lf = 10;    //line feed
            eol = cr lf| cr | lf ;         
            branco = ' ';

States

      normal, comentario;

Tokens
      //palavras reservadas               
    
      {normal} programa = 'programa' ;             
      {normal} inicio = 'inicio' ;
      {normal} fim = 'fim.' ;
      {normal} const = 'const';
      {normal} var = 'var' ;                             
      {normal} escreva = 'escreva' ;
      {normal} leia = 'leia' ;
      {normal} inteiro = 'inteiro' ;
      {normal} real = 'real' ;
      {normal} caractere = 'caractere' ;
      // {normal} boolean = 'boolean' ;
      //--------------------------------------------
      //if then
      {normal} se = 'se' ;
      {normal} entao = 'entao';
      {normal} fim_se = 'fim'branco'se' ;
      //case 
      {normal} avalie = 'avalie';
      {normal} caso = 'caso'; 
      {normal} fim_avalie = 'fim'branco'avalie' ;
 
      {normal} senao = 'senao'; //if e avalie
      {normal} faca = 'faca'; // enquanto e para
      {normal} ate = 'ate';  // repita e para

      //while
      {normal} enquanto = 'enquanto';
      {normal} fim_enquanto = 'fim'branco'enquanto' ;
 
      {normal} repita = 'repita' ;
      //for
      {normal} para = 'para'; 
      {normal} de = 'de';
      {normal} passo = 'passo';
      {normal} pare = 'pare';
      {normal} continue = 'continue';
      {normal} fim_para = 'fim'branco'para' ;
      //--------------------------------
      //simbolos aritmeticos
      {normal} mais = '+' ;
      {normal} menos = '-' ;
      {normal} produto = '*' ;
      {normal} divisao = '/' ; 
      {normal} atribuicao = '<-' ;

      //simbolos separadores
      {normal} virgula = ',' ;
      {normal} dois_pts = ':' ;
      {normal} pt_virg = ';' ;
      //{normal} pt = '.' ;
      {normal} abre_parantes = '(' ;
      {normal} fecha_parentes = ')' ;
      //{normal} abre_chave = '{';
      //{normal} fecha_chave = '}';
      {normal} abre_colchete = '[' ;
      {normal} fecha_colchete = ']' ;
      
      //simbolos booleanos
      {normal} xor = 'xor' ;
      {normal} ou = 'ou' ;
      {normal} nao = 'nao' ;
      {normal} e = 'e' ;
      {normal} igual = '=' ;
      {normal} diferente = '<>' ;
      {normal} maior = '>' ;
      {normal} menor = '<' ;     
      {normal} maior_igual = '>=' ;
      {normal} menor_igual = '<=' ;


      //Identificadores
      {normal} identificador = (sublinhado | letras_minus | letras_maius)(letras_minus | letras_maius | digitos | sublinhado)*;

      //Numeros
      {normal} num_int = digitos+;
      {normal} num_real = digitos+','digitos+;

       //string
      {normal} string = aspas_simples [[all_char - [lf + cr]] - [aspas_simples + barrainvert]]* 
                        (barrainvert+ aspas_simples? [[all_char - [lf + cr]] - [aspas_simples + barrainvert]]*)* aspas_simples;

      //all_espaco
      {normal} all_espaco = (branco | tab | eol )+ ;

      //Comentarios
      {normal} coment_linha = '//' [all_char - [lf + cr]]*;
      //comentario Aninhado
      {normal->comentario, comentario} coment_aninhado = barraestrela;
      {comentario} coment_escopo = [all_char - ['*' + '/']]*;
      {comentario} coment_estrela = '*';
      {comentario} coment_barra = '/';
      {comentario} coment_fim = '*/';
        

Ignored Tokens
      all_espaco, coment_linha, coment_aninhado, coment_estrela, coment_barra, coment_fim;

Productions

//Cabeçalho
//programa = T.programa identificador inicio declaracao* comando* fim ;
programa = T.programa identificador inicio list_declaracao list_comando fim 
            {-> New programa([list_declaracao.declaracao],[list_comando.comando])};

//Declaração
list_declaracao {-> declaracao*} = declaracao* {->[declaracao]}; 

declaracao = {seq_variaveis} tipo dois_pts decl_var* variavel pt_virg {-> New declaracao.seq_variaveis(tipo, [decl_var.variavel, variavel])} 
| {constante}const identificador valor pt_virg{-> New declaracao.constante(const, identificador, valor)};  

decl_var{->variavel} = variavel virgula{->variavel};

tipo = {real}real {-> New tipo.real(real)}|
       {int}inteiro {-> New tipo.int(inteiro)}|
        {char}caractere {-> New tipo.char(caractere)};

variavel = {id}identificador {-> New variavel.id(identificador)}| 
           {vetor}identificador abre_colchete num_int fecha_colchete {-> New variavel.vetor(identificador, abre_colchete, num_int, fecha_colchete)};

valor = {string}string {-> New valor.string(string)}|
       {num_int}num_int {-> New valor.num_int(num_int)}| 
       {num_real}num_real {-> New valor.num_real(num_real)}; 




 //Corpo de Comando
list_comando {-> comando*} = comando* {->[comando]};

comando = {atribuicao} variavel atribuicao exp pt_virg 
{-> New comando.atribuicao(variavel, exp)}
| {leia} leia abre_parantes decl_var* variavel fecha_parentes pt_virg 
{-> New comando.leia([variavel])}
| {escreva_exp} escreva abre_parantes exp_virgula* exp fecha_parentes pt_virg 
{-> New comando.escreva_exp([exp])}
| {escreva_exp_logica} escreva abre_parantes exp_logica_virgula* exp_logica fecha_parentes pt_virg 
{-> New comando.escreva_exp_logica([exp_logica])}
| {se} se abre_parantes exp_logica fecha_parentes entao comando+ else_parte? fim_se pt_virg 
{-> New comando.se(exp_logica, [comando], else_parte)}
| {avalie} avalie abre_parantes exp fecha_parentes caso_opcao* padrao? fim_avalie pt_virg 
{-> New comando.avalie(exp, [caso_opcao], padrao)}
| {enquanto} enquanto abre_parantes exp_logica fecha_parentes faca comando+ fim_enquanto pt_virg
{-> New comando.enquanto(exp_logica, [comando])}
| {repita} repita comando+ ate abre_parantes exp_logica fecha_parentes pt_virg
{-> New comando.repita([comando], exp_logica)}
| {para} para variavel de i_para P.passo? ate n_para faca comando+ fim_para pt_virg
{-> New comando.para(variavel, i_para, P.passo, n_para, [comando])};

//Não terminais utilizados no corpo de comandos
exp_virgula {-> exp} = exp virgula {->exp};  
exp_logica_virgula {->exp_logica} = exp_logica virgula {->exp_logica};    
else_parte = senao comando+ {-> New else_parte([comando]) };
caso_opcao = caso valor dois_pts comando+ {-> New caso_opcao(valor, [comando])};   
padrao  = senao dois_pts comando+ {-> New padrao([comando])};
passo = T.passo num_int {-> New passo(num_int)};
i_para = num_int {-> New i_para(num_int)}; 
n_para = num_int {-> New n_para(num_int)};

//Expressões
exp = {soma}exp soma termo {-> New exp.soma(exp, termo.exp)}|
      {termo}termo {-> termo.exp};
termo {->exp} = {mult} termo mult fator{-> New exp.mult(termo.exp, fator.exp)}|
      {fator}fator{->fator.exp};
fator{->exp} = {exp_parentes} abre_parantes exp fecha_parentes{-> New exp.exp_parentes(exp)}|
      {menos_exp} menos fator{-> New exp.menos_exp(fator.exp)}|
      {variavel}variavel{-> New exp.variavel(variavel)}|
      {valor}valor{-> New exp.valor(valor)}; 
      
soma = {mais}mais |
       {menos}menos;
mult = {produto}produto | 
      {divisao}divisao ;


//Menor Precedência
exp_logica = {xor}exp_logica xor exp_ou 
            {-> New exp_logica.xor(exp_logica, exp_ou.exp_logica)}| 
             {exp_ou}exp_ou {-> exp_ou.exp_logica};

exp_ou {->exp_logica} = {ou}exp_ou ou exp_e 
                        {-> New exp_logica.ou(exp_ou.exp_logica, exp_e.exp_logica)} |
                         {exp_e} exp_e {-> exp_e.exp_logica};

exp_e {->exp_logica} =  {e} exp_e e exp_igual 
                        {-> New exp_logica.e(exp_e.exp_logica, exp_igual.exp_logica)} |
                        {exp_igual} exp_igual {-> exp_igual.exp_logica};

//Permite (a==b) = (b==c) || a = b; Mas não permite a == b == c
exp_igual {->exp_logica} = {exp_simp_igual} exp igual_diferente exp_alter 
            {-> New exp_logica.exp_simp_igual(exp, exp_alter.exp)} |
             {exp_mult_igual}  exp_parentes igual_diferente exp_parentes_alter 
             {-> New exp_logica.exp_mult_igual(exp_parentes.exp_logica, exp_parentes_alter.exp_logica)} | 
             {exp_comparacao} exp op_comparar exp_alter {-> New exp_logica.exp_comparacao(exp, exp_alter.exp)}
             | {exp_nao} exp_nao {-> exp_nao.exp_logica};


exp_nao {-> exp_logica} = {nao_exp_parentes}nao exp_parentes 
                          {-> New exp_logica.nao_exp_parentes(exp_parentes.exp_logica)} |
                          {exp_parentes}exp_parentes{-> exp_parentes.exp_logica};

exp_parentes {-> exp_logica} = abre_parantes exp_logica fecha_parentes {-> exp_logica};

// exp alternativas para evitar o uso de [l]: e [r]: para variaveis iguais
exp_alter{->exp} = exp {->exp};
exp_parentes_alter {->exp_logica} = abre_parantes exp_logica fecha_parentes {->exp_logica}; 

igual_diferente = {igual} igual |
                  {diferente} diferente ;
op_comparar = {maior} maior | 
      {menor} menor | 
      {maior_igual} maior_igual |
      {menor_igual} menor_igual ; 


Abstract Syntax Tree

programa = declaracao* comando*;
//Declaracao
declaracao = {seq_variaveis}tipo variavel+ |
             {constante} const identificador valor;
tipo = {real}real | 
      {int}inteiro | 
      {char}caractere;
variavel = {id}identificador | 
            {vetor}identificador abre_colchete num_int fecha_colchete;
valor = {string}string | 
            {num_int}num_int | 
            {num_real}num_real; 

//Comando

comando = {atribuicao} variavel exp
| {leia} variavel+
| {escreva_exp} exp+
| {escreva_exp_logica} exp_logica+
| {se} exp_logica comando+ else_parte?
| {avalie} exp caso_opcao* padrao?
| {enquanto} exp_logica comando+
| {repita} comando+  exp_logica
| {para} variavel i_para P.passo? n_para comando+;

//Não terminais utilizados no corpo de comandos  
else_parte = comando+;
caso_opcao = valor comando+;   
padrao  = comando+;
passo = num_int;
i_para = num_int; 
n_para = num_int;


//Expressões
exp = {soma} [l]:exp [r]:exp|
      {mult} [l]:exp [r]:exp|
      {exp_parentes} exp|
      {menos_exp} exp|
      {variavel} variavel|
      {valor} valor; 


//Menor Precedência
exp_logica = {xor} [l]:exp_logica [r]:exp_logica| 
             {ou} [l]:exp_logica [r]:exp_logica |
             {e} [l]:exp_logica [r]:exp_logica |
//Permite (a==b) = (b==c) || a = b; Mas não permite a == b == c
            {exp_simp_igual} [l]: exp [r]: exp | 
            {exp_mult_igual} [l]: exp_logica [r]: exp_logica |
            {exp_comparacao} [l]: exp [r]: exp |
            {nao_exp_parentes}exp_logica | 
            {exp_parentes}exp_logica;


